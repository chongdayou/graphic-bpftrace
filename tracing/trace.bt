#!/usr/bin/env/ bpftrace

/* csv columns: timestamp, tid, isMain, tracepoint, lifetime */

BEGIN {
	@main_pid = 0;
	printf("timestamp,tid,isMain,tracepoint,lifetime\n");
}

/* record exec() called by main thread */
tracepoint:sched:sched_process_exec
/@main_pid == 0/
{
	$program_name = "multithreadMain";
	if (strcontains(str(args->filename), $program_name)) {
		@main_pid = args->pid;
		@start[args->pid] = nsecs;
		printf("%llu,%d,true,tracepoint:sched:sched_process_exec,\n", @start[args->pid], args->pid);
	}
}

/* record fork() called by pthread_create */
/* $target is the passed in PID */
tracepoint:sched:sched_process_fork
/@main_pid != 0 && args->parent_pid == @main_pid && args->child_pid != args->parent_pid/
{
	$pid = args->child_pid;
	@start[$pid] = nsecs;
	printf("%llu,%d,false,tracepoint:sched:sched_process_fork,\n", @start[$pid], $pid);
}

/* record exit() called by pthread_library */
tracepoint:sched:sched_process_exit
/@main_pid != 0/
{
	$start = @start[args->pid];
	@end[args->pid] = nsecs;
	$lifetime_ns = $start ? (@end[args->pid] - $start) : -1;
	$lifetime_ms = $start ? $lifetime_ns / 1000000 : -1;
	$lifetime_ms_remainder = $start ? ($lifetime_ns % 1000000) / 1000 : 0;
	args->pid != @main_pid ?
			printf("%llu,%d,false,tracepoint:sched:sched_process_exit,lifetime=%llu.%03llu\n", @end[args->pid], args->pid, $lifetime_ms, $lifetime_ms_remainder) :
			printf("%llu,%d,true,tracepoint:sched:sched_process_exit,lifetime=%llu.%03llu\n", @end[args->pid], args->pid, $lifetime_ms, $lifetime_ms_remainder);
	delete(@start[args->pid]);
	delete(@end[args->pid]);
}

END {
	clear(@main_pid);
	clear(@start);
	clear(@end);
}